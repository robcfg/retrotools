#include "6x09_Disassembler.h"

void Disassembler_6x09::Init_Postbyte_Opcode_Map( std::map<unsigned char, PostByte_6x09>& _map, EProcessor _processor )
{
	_map.emplace(0x00, PostByte_6x09{"0,X"    , "EAD"       , {     } });
	_map.emplace(0x01, PostByte_6x09{"1,X"    , "EAD"       , {     } });
	_map.emplace(0x02, PostByte_6x09{"2,X"    , "EAD"       , {     } });
	_map.emplace(0x03, PostByte_6x09{"3,X"    , "EAD"       , {     } });
	_map.emplace(0x04, PostByte_6x09{"4,X"    , "EAD"       , {     } });
	_map.emplace(0x05, PostByte_6x09{"5,X"    , "EAD"       , {     } });
	_map.emplace(0x06, PostByte_6x09{"6,X"    , "EAD"       , {     } });
	_map.emplace(0x07, PostByte_6x09{"7,X"    , "EAD"       , {     } });
	_map.emplace(0x08, PostByte_6x09{"8,X"    , "EAD"       , {     } });
	_map.emplace(0x09, PostByte_6x09{"9,X"    , "EAD"       , {     } });
	_map.emplace(0x0A, PostByte_6x09{"10,X"   , "EEAD"      , {     } });
	_map.emplace(0x0B, PostByte_6x09{"11,X"   , "EEAD"      , {     } });
	_map.emplace(0x0C, PostByte_6x09{"12,X"   , "EEAD"      , {     } });
	_map.emplace(0x0D, PostByte_6x09{"13,X"   , "EEAD"      , {     } });
	_map.emplace(0x0E, PostByte_6x09{"14,X"   , "EEAD"      , {     } });
	_map.emplace(0x0F, PostByte_6x09{"15,X"   , "EEAD"      , {     } });
	_map.emplace(0x10, PostByte_6x09{"-16,X"  , "EEEAD"     , {     } });
	_map.emplace(0x11, PostByte_6x09{"-15,X"  , "EEEAD"     , {     } });
	_map.emplace(0x12, PostByte_6x09{"-14,X"  , "EEEAD"     , {     } });
	_map.emplace(0x13, PostByte_6x09{"-13,X"  , "EEEAD"     , {     } });
	_map.emplace(0x14, PostByte_6x09{"-12,X"  , "EEEAD"     , {     } });
	_map.emplace(0x15, PostByte_6x09{"-11,X"  , "EEEAD"     , {     } });
	_map.emplace(0x16, PostByte_6x09{"-10,X"  , "EEEAD"     , {     } });
	_map.emplace(0x17, PostByte_6x09{"-9,X"   , "EEAD"      , {     } });
	_map.emplace(0x18, PostByte_6x09{"-8,X"   , "EEAD"      , {     } });
	_map.emplace(0x19, PostByte_6x09{"-7,X"   , "EEAD"      , {     } });
	_map.emplace(0x1A, PostByte_6x09{"-6,X"   , "EEAD"      , {     } });
	_map.emplace(0x1B, PostByte_6x09{"-5,X"   , "EEAD"      , {     } });
	_map.emplace(0x1C, PostByte_6x09{"-4,X"   , "EEAD"      , {     } });
	_map.emplace(0x1D, PostByte_6x09{"-3,X"   , "EEAD"      , {     } });
	_map.emplace(0x1E, PostByte_6x09{"-2,X"   , "EEAD"      , {     } });
	_map.emplace(0x1F, PostByte_6x09{"-1,X"   , "EEAD"      , {     } });
	_map.emplace(0x20, PostByte_6x09{"0,Y"    , "EAD"       , {     } });
	_map.emplace(0x21, PostByte_6x09{"1,Y"    , "EAD"       , {     } });
	_map.emplace(0x22, PostByte_6x09{"2,Y"    , "EAD"       , {     } });
	_map.emplace(0x23, PostByte_6x09{"3,Y"    , "EAD"       , {     } });
	_map.emplace(0x24, PostByte_6x09{"4,Y"    , "EAD"       , {     } });
	_map.emplace(0x25, PostByte_6x09{"5,Y"    , "EAD"       , {     } });
	_map.emplace(0x26, PostByte_6x09{"6,Y"    , "EAD"       , {     } });
	_map.emplace(0x27, PostByte_6x09{"7,Y"    , "EAD"       , {     } });
	_map.emplace(0x28, PostByte_6x09{"8,Y"    , "EAD"       , {     } });
	_map.emplace(0x29, PostByte_6x09{"9,Y"    , "EAD"       , {     } });
	_map.emplace(0x2A, PostByte_6x09{"10,Y"   , "EEAD"      , {     } });
	_map.emplace(0x2B, PostByte_6x09{"11,Y"   , "EEAD"      , {     } });
	_map.emplace(0x2C, PostByte_6x09{"12,Y"   , "EEAD"      , {     } });
	_map.emplace(0x2D, PostByte_6x09{"13,Y"   , "EEAD"      , {     } });
	_map.emplace(0x2E, PostByte_6x09{"14,Y"   , "EEAD"      , {     } });
	_map.emplace(0x2F, PostByte_6x09{"15,Y"   , "EEAD"      , {     } });
	_map.emplace(0x30, PostByte_6x09{"-16,Y"  , "EEEAD"     , {     } });
	_map.emplace(0x31, PostByte_6x09{"-15,Y"  , "EEEAD"     , {     } });
	_map.emplace(0x32, PostByte_6x09{"-14,Y"  , "EEEAD"     , {     } });
	_map.emplace(0x33, PostByte_6x09{"-13,Y"  , "EEEAD"     , {     } });
	_map.emplace(0x34, PostByte_6x09{"-12,Y"  , "EEEAD"     , {     } });
	_map.emplace(0x35, PostByte_6x09{"-11,Y"  , "EEEAD"     , {     } });
	_map.emplace(0x36, PostByte_6x09{"-10,Y"  , "EEEAD"     , {     } });
	_map.emplace(0x37, PostByte_6x09{"-9,Y"   , "EEAD"      , {     } });
	_map.emplace(0x38, PostByte_6x09{"-8,Y"   , "EEAD"      , {     } });
	_map.emplace(0x39, PostByte_6x09{"-7,Y"   , "EEAD"      , {     } });
	_map.emplace(0x3A, PostByte_6x09{"-6,Y"   , "EEAD"      , {     } });
	_map.emplace(0x3B, PostByte_6x09{"-5,Y"   , "EEAD"      , {     } });
	_map.emplace(0x3C, PostByte_6x09{"-4,Y"   , "EEAD"      , {     } });
	_map.emplace(0x3D, PostByte_6x09{"-3,Y"   , "EEAD"      , {     } });
	_map.emplace(0x3E, PostByte_6x09{"-2,Y"   , "EEAD"      , {     } });
	_map.emplace(0x3F, PostByte_6x09{"-1,Y"   , "EEAD"      , {     } });
	_map.emplace(0x40, PostByte_6x09{"0,U"    , "EAD"       , {     } });
	_map.emplace(0x41, PostByte_6x09{"1,U"    , "EAD"       , {     } });
	_map.emplace(0x42, PostByte_6x09{"2,U"    , "EAD"       , {     } });
	_map.emplace(0x43, PostByte_6x09{"3,U"    , "EAD"       , {     } });
	_map.emplace(0x44, PostByte_6x09{"4,U"    , "EAD"       , {     } });
	_map.emplace(0x45, PostByte_6x09{"5,U"    , "EAD"       , {     } });
	_map.emplace(0x46, PostByte_6x09{"6,U"    , "EAD"       , {     } });
	_map.emplace(0x47, PostByte_6x09{"7,U"    , "EAD"       , {     } });
	_map.emplace(0x48, PostByte_6x09{"8,U"    , "EAD"       , {     } });
	_map.emplace(0x49, PostByte_6x09{"9,U"    , "EAD"       , {     } });
	_map.emplace(0x4A, PostByte_6x09{"10,U"   , "EEAD"      , {     } });
	_map.emplace(0x4B, PostByte_6x09{"11,U"   , "EEAD"      , {     } });
	_map.emplace(0x4C, PostByte_6x09{"12,U"   , "EEAD"      , {     } });
	_map.emplace(0x4D, PostByte_6x09{"13,U"   , "EEAD"      , {     } });
	_map.emplace(0x4E, PostByte_6x09{"14,U"   , "EEAD"      , {     } });
	_map.emplace(0x4F, PostByte_6x09{"15,U"   , "EEAD"      , {     } });
	_map.emplace(0x50, PostByte_6x09{"-16,U"  , "EEEAD"     , {     } });
	_map.emplace(0x51, PostByte_6x09{"-15,U"  , "EEEAD"     , {     } });
	_map.emplace(0x52, PostByte_6x09{"-14,U"  , "EEEAD"     , {     } });
	_map.emplace(0x53, PostByte_6x09{"-13,U"  , "EEEAD"     , {     } });
	_map.emplace(0x54, PostByte_6x09{"-12,U"  , "EEEAD"     , {     } });
	_map.emplace(0x55, PostByte_6x09{"-11,U"  , "EEEAD"     , {     } });
	_map.emplace(0x56, PostByte_6x09{"-10,U"  , "EEEAD"     , {     } });
	_map.emplace(0x57, PostByte_6x09{"-9,U"   , "EEAD"      , {     } });
	_map.emplace(0x58, PostByte_6x09{"-8,U"   , "EEAD"      , {     } });
	_map.emplace(0x59, PostByte_6x09{"-7,U"   , "EEAD"      , {     } });
	_map.emplace(0x5A, PostByte_6x09{"-6,U"   , "EEAD"      , {     } });
	_map.emplace(0x5B, PostByte_6x09{"-5,U"   , "EEAD"      , {     } });
	_map.emplace(0x5C, PostByte_6x09{"-4,U"   , "EEAD"      , {     } });
	_map.emplace(0x5D, PostByte_6x09{"-3,U"   , "EEAD"      , {     } });
	_map.emplace(0x5E, PostByte_6x09{"-2,U"   , "EEAD"      , {     } });
	_map.emplace(0x5F, PostByte_6x09{"-1,U"   , "EEAD"      , {     } });
	_map.emplace(0x60, PostByte_6x09{"0,S"    , "EAD"       , {     } });
	_map.emplace(0x61, PostByte_6x09{"1,S"    , "EAD"       , {     } });
	_map.emplace(0x62, PostByte_6x09{"2,S"    , "EAD"       , {     } });
	_map.emplace(0x63, PostByte_6x09{"3,S"    , "EAD"       , {     } });
	_map.emplace(0x64, PostByte_6x09{"4,S"    , "EAD"       , {     } });
	_map.emplace(0x65, PostByte_6x09{"5,S"    , "EAD"       , {     } });
	_map.emplace(0x66, PostByte_6x09{"6,S"    , "EAD"       , {     } });
	_map.emplace(0x67, PostByte_6x09{"7,S"    , "EAD"       , {     } });
	_map.emplace(0x68, PostByte_6x09{"8,S"    , "EAD"       , {     } });
	_map.emplace(0x69, PostByte_6x09{"9,S"    , "EAD"       , {     } });
	_map.emplace(0x6A, PostByte_6x09{"10,S"   , "EEAD"      , {     } });
	_map.emplace(0x6B, PostByte_6x09{"11,S"   , "EEAD"      , {     } });
	_map.emplace(0x6C, PostByte_6x09{"12,S"   , "EEAD"      , {     } });
	_map.emplace(0x6D, PostByte_6x09{"13,S"   , "EEAD"      , {     } });
	_map.emplace(0x6E, PostByte_6x09{"14,S"   , "EEAD"      , {     } });
	_map.emplace(0x6F, PostByte_6x09{"15,S"   , "EEAD"      , {     } });
	_map.emplace(0x70, PostByte_6x09{"-16,S"  , "EEEAD"     , {     } });
	_map.emplace(0x71, PostByte_6x09{"-15,S"  , "EEEAD"     , {     } });
	_map.emplace(0x72, PostByte_6x09{"-14,S"  , "EEEAD"     , {     } });
	_map.emplace(0x73, PostByte_6x09{"-13,S"  , "EEEAD"     , {     } });
	_map.emplace(0x74, PostByte_6x09{"-12,S"  , "EEEAD"     , {     } });
	_map.emplace(0x75, PostByte_6x09{"-11,S"  , "EEEAD"     , {     } });
	_map.emplace(0x76, PostByte_6x09{"-10,S"  , "EEEAD"     , {     } });
	_map.emplace(0x77, PostByte_6x09{"-9,S"   , "EEAD"      , {     } });
	_map.emplace(0x78, PostByte_6x09{"-8,S"   , "EEAD"      , {     } });
	_map.emplace(0x79, PostByte_6x09{"-7,S"   , "EEAD"      , {     } });
	_map.emplace(0x7A, PostByte_6x09{"-6,S"   , "EEAD"      , {     } });
	_map.emplace(0x7B, PostByte_6x09{"-5,S"   , "EEAD"      , {     } });
	_map.emplace(0x7C, PostByte_6x09{"-4,S"   , "EEAD"      , {     } });
	_map.emplace(0x7D, PostByte_6x09{"-3,S"   , "EEAD"      , {     } });
	_map.emplace(0x7E, PostByte_6x09{"-2,S"   , "EEAD"      , {     } });
	_map.emplace(0x7F, PostByte_6x09{"-1,S"   , "EEAD"      , {     } });
	_map.emplace(0x80, PostByte_6x09{",X+"    , "ADA"       , {     } });
	_map.emplace(0x81, PostByte_6x09{",X++"   , "ADAA"      , {     } });
	_map.emplace(0x82, PostByte_6x09{",-X"    , "AAD"       , {     } });
	_map.emplace(0x83, PostByte_6x09{",--X"   , "AAAD"      , {     } });
	_map.emplace(0x84, PostByte_6x09{",X"     , "AD"        , {     } });
	_map.emplace(0x85, PostByte_6x09{"B,X"    , "DAD"       , {     } });
	_map.emplace(0x86, PostByte_6x09{"A,X"    , "DAD"       , {     } });
	_map.emplace(0x87, PostByte_6x09{"E,X"    , "DAD"       , {     } });
	_map.emplace(0x88, PostByte_6x09{"?,X"    , "AEEAD"     , { {1} } });
	_map.emplace(0x89, PostByte_6x09{"?,X"    , "AEEEEAD"   , { {2} } });
	_map.emplace(0x8A, PostByte_6x09{"F,X"    , "DAD"       , {     } });
	_map.emplace(0x8B, PostByte_6x09{"D,X"    , "DAD"       , {     } });
	_map.emplace(0x8C, PostByte_6x09{"?,PC"   , "AEEADD"    , { {1} } });
	_map.emplace(0x8D, PostByte_6x09{"?,PC"   , "AEEEEADD"  , { {2} } });
	_map.emplace(0x8E, PostByte_6x09{"W,X"    , "DAD"       , {     } });
	_map.emplace(0x8F, PostByte_6x09{",W"     , "AD"        , {     } });
	_map.emplace(0x90, PostByte_6x09{"[,W]"   , "AADA"      , {     } });
	_map.emplace(0x91, PostByte_6x09{"[,X++]" , "AADAAA"    , {     } });
	_map.emplace(0x92, PostByte_6x09{"Illegal", "BBBBBBB"   , {     } });
	_map.emplace(0x93, PostByte_6x09{"[,--X]" , "AAAADA"    , {     } });
	_map.emplace(0x94, PostByte_6x09{"[,X]"   , "AADA"      , {     } });
	_map.emplace(0x95, PostByte_6x09{"[B,X]"  , "ADADA"     , {     } });
	_map.emplace(0x96, PostByte_6x09{"[A,X]"  , "ADADA"     , {     } });
	_map.emplace(0x97, PostByte_6x09{"[E,X]"  , "ADADA"     , {     } });
	_map.emplace(0x98, PostByte_6x09{"[?,X]"  , "AAEEADA"   , { {1} } });
	_map.emplace(0x99, PostByte_6x09{"[?,X]"  , "AAEEEEADA" , { {2} } });
	_map.emplace(0x9A, PostByte_6x09{"[F,X]"  , "ADADA"     , {     } });
	_map.emplace(0x9B, PostByte_6x09{"[D,X]"  , "ADADA"     , {     } });
	_map.emplace(0x9C, PostByte_6x09{"[?,PC]" , "AAEEADDA"  , { {1} } });
	_map.emplace(0x9D, PostByte_6x09{"[?,PC]" , "AAEEEEADDA", { {2} } });
	_map.emplace(0x9E, PostByte_6x09{"[W,X]"  , "ADADA"     , {     } });
	_map.emplace(0x9F, PostByte_6x09{"[?]"    , "AAEEEEA"   , { {2} } });
	_map.emplace(0xA0, PostByte_6x09{",Y+"    , "ADA"       , {     } });
	_map.emplace(0xA1, PostByte_6x09{",Y++"   , "ADAA"      , {     } });
	_map.emplace(0xA2, PostByte_6x09{",-Y"    , "AAD"       , {     } });
	_map.emplace(0xA3, PostByte_6x09{",--Y"   , "AAAD"      , {     } });
	_map.emplace(0xA4, PostByte_6x09{",Y"     , "AD"        , {     } });
	_map.emplace(0xA5, PostByte_6x09{"B,Y"    , "ADA"       , {     } });
	_map.emplace(0xA6, PostByte_6x09{"A,Y"    , "ADA"       , {     } });
	_map.emplace(0xA7, PostByte_6x09{"E,Y"    , "ADA"       , {     } });
	_map.emplace(0xA8, PostByte_6x09{"?,Y"    , "AEEAD"     , { {1} } });
	_map.emplace(0xA9, PostByte_6x09{"?,Y"    , "AEEEEAD"   , { {2} } });
	_map.emplace(0xAA, PostByte_6x09{"F,Y"    , "DAD"       , {     } });
	_map.emplace(0xAB, PostByte_6x09{"D,Y"    , "DAD"       , {     } });
	_map.emplace(0xAC, PostByte_6x09{"?,PC"   , "AEEADD"    , { {1} } });
	_map.emplace(0xAD, PostByte_6x09{"?,PC"   , "AEEADD"    , { {2} } });
	_map.emplace(0xAE, PostByte_6x09{"W,Y"    , "DAD"       , {     } });
	_map.emplace(0xAF, PostByte_6x09{"?,W"    , "AEEEEAD"   , { {2} } });
	_map.emplace(0xB0, PostByte_6x09{"[?,W]"  , "AAEEEEADA" , { {2} } });
	_map.emplace(0xB1, PostByte_6x09{"[,Y++]" , "AADAAA"    , {     } });
	_map.emplace(0xB2, PostByte_6x09{"Illegal", "BBBBBBB"   , {     } });
	_map.emplace(0xB3, PostByte_6x09{"[,--Y]" , "AAAADA"    , {     } });
	_map.emplace(0xB4, PostByte_6x09{"[,Y]"   , "AADA"      , {     } });
	_map.emplace(0xB5, PostByte_6x09{"[B,Y]"  , "ADADA"     , {     } });
	_map.emplace(0xB6, PostByte_6x09{"[A,Y]"  , "ADADA"     , {     } });
	_map.emplace(0xB7, PostByte_6x09{"[E,Y]"  , "ADADA"     , {     } });
	_map.emplace(0xB8, PostByte_6x09{"[?,Y]"  , "AAEEADA"   , { {1} } });
	_map.emplace(0xB9, PostByte_6x09{"[?,Y]"  , "AAEEEEADA" , { {2} } });
	_map.emplace(0xBA, PostByte_6x09{"[F,Y]"  , "ADADA"     , {     } });
	_map.emplace(0xBB, PostByte_6x09{"[D,Y]"  , "ADADA"     , {     } });
	_map.emplace(0xBC, PostByte_6x09{"[?,PC]" , "AAEEADDA"  , { {1} } });
	_map.emplace(0xBD, PostByte_6x09{"[?,PC]" , "AAEEEEADDA", { {2} } });
	_map.emplace(0xBE, PostByte_6x09{"[W,Y]"  , "ADADA"     , {     } });
	_map.emplace(0xBF, PostByte_6x09{"Illegal", "BBBBBBB"   , {     } });
	_map.emplace(0xC0, PostByte_6x09{",U+"    , "ADA"       , {     } });
	_map.emplace(0xC1, PostByte_6x09{",U++"   , "ADAA"      , {     } });
	_map.emplace(0xC2, PostByte_6x09{",-U"    , "AAD"       , {     } });
	_map.emplace(0xC3, PostByte_6x09{",--U"   , "AAAD"      , {     } });
	_map.emplace(0xC4, PostByte_6x09{",U"     , "AD"        , {     } });
	_map.emplace(0xC5, PostByte_6x09{"B,U"    , "DAD"       , {     } });
	_map.emplace(0xC6, PostByte_6x09{"A,U"    , "DAD"       , {     } });
	_map.emplace(0xC7, PostByte_6x09{"E,U"    , "DAD"       , {     } });
	_map.emplace(0xC8, PostByte_6x09{"?,U"    , "AEEAD"     , { {1} } });
	_map.emplace(0xC9, PostByte_6x09{"?,U"    , "AEEEEAD"   , { {2} } });
	_map.emplace(0xCA, PostByte_6x09{"F,U"    , "DAD"       , {     } });
	_map.emplace(0xCB, PostByte_6x09{"D,U"    , "DAD"       , {     } });
	_map.emplace(0xCC, PostByte_6x09{"?,PC"   , "AEEADD"    , { {1} } });
	_map.emplace(0xCD, PostByte_6x09{"?,PC"   , "AEEEEADD"  , { {2} } });
	_map.emplace(0xCE, PostByte_6x09{"W,U"    , "DAD"       , {     } });
	_map.emplace(0xCF, PostByte_6x09{",W++"   , "ADAA"      , {     } });
	_map.emplace(0xD0, PostByte_6x09{"[,W++]" , "AADAAA"    , {     } });
	_map.emplace(0xD1, PostByte_6x09{"[,U++]" , "AADAAA"    , {     } });
	_map.emplace(0xD2, PostByte_6x09{"Illegal", "BBBBBBB"   , {     } });
	_map.emplace(0xD3, PostByte_6x09{"[,--U]" , "AAAADA"    , {     } });
	_map.emplace(0xD4, PostByte_6x09{"[,U]"   , "AADA"      , {     } });
	_map.emplace(0xD5, PostByte_6x09{"[B,U]"  , "ADADA"     , {     } });
	_map.emplace(0xD6, PostByte_6x09{"[A,U]"  , "ADADA"     , {     } });
	_map.emplace(0xD7, PostByte_6x09{"[E,U]"  , "ADADA"     , {     } });
	_map.emplace(0xD8, PostByte_6x09{"[?,U]"  , "AAEEADA"   , { {1} } });
	_map.emplace(0xD9, PostByte_6x09{"[?,U]"  , "AAEEEEADA" , { {2} } });
	_map.emplace(0xDA, PostByte_6x09{"[F,U]"  , "ADADA"     , {     } });
	_map.emplace(0xDB, PostByte_6x09{"[D,U]"  , "ADADA"     , {     } });
	_map.emplace(0xDC, PostByte_6x09{"[?,PC]" , "AAEEADDA"  , { {1} } });
	_map.emplace(0xDD, PostByte_6x09{"[?,PC]" , "AAEEEEADDA", { {2} } });
	_map.emplace(0xDE, PostByte_6x09{"[W,U]"  , "ADADA"     , {     } });
	_map.emplace(0xDF, PostByte_6x09{"Illegal", "BBBBBBB"   , { {2} } });
	_map.emplace(0xE0, PostByte_6x09{",S+"    , "ADA"       , {     } });
	_map.emplace(0xE1, PostByte_6x09{",S++"   , "ADAA"      , {     } });
	_map.emplace(0xE2, PostByte_6x09{",-S"    , "AAD"       , {     } });
	_map.emplace(0xE3, PostByte_6x09{",--S"   , "AAAD"      , {     } });
	_map.emplace(0xE4, PostByte_6x09{",S"     , "AD"        , {     } });
	_map.emplace(0xE5, PostByte_6x09{"B,S"    , "DAD"       , {     } });
	_map.emplace(0xE6, PostByte_6x09{"A,S"    , "DAD"       , {     } });
	_map.emplace(0xE7, PostByte_6x09{"E,S"    , "DAD"       , {     } });
	_map.emplace(0xE8, PostByte_6x09{"?,S"    , "AEEAD"     , { {1} } });
	_map.emplace(0xE9, PostByte_6x09{"?,S"    , "AEEEEAD"   , { {2} } });
	_map.emplace(0xEA, PostByte_6x09{"F,S"    , "DAD"       , {     } });
	_map.emplace(0xEB, PostByte_6x09{"D,S"    , "DAD"       , {     } });
	_map.emplace(0xEC, PostByte_6x09{"?,PC"   , "AEEADD"    , { {1} } });
	_map.emplace(0xED, PostByte_6x09{"?,PC"   , "AEEEEADD"  , { {2} } });
	_map.emplace(0xEE, PostByte_6x09{"W,S"    , "DAD"       , {     } });
	_map.emplace(0xEF, PostByte_6x09{",--W"   , "AAAD"      , {     } });
	_map.emplace(0xF0, PostByte_6x09{"[,--W]" , "AAAADA"    , {     } });
	_map.emplace(0xF1, PostByte_6x09{"[,S++]" , "AADAAA"    , {     } });
	_map.emplace(0xF2, PostByte_6x09{"Illegal", "BBBBBBB"   , {     } });
	_map.emplace(0xF3, PostByte_6x09{"[,--S]" , "AAAADA"    , {     } });
	_map.emplace(0xF4, PostByte_6x09{"[,S]"   , "AADA"      , {     } });
	_map.emplace(0xF5, PostByte_6x09{"[B,S]"  , "ADADA"     , {     } });
	_map.emplace(0xF6, PostByte_6x09{"[A,S]"  , "ADADA"     , {     } });
	_map.emplace(0xF7, PostByte_6x09{"[E,S]"  , "ADADA"     , {     } });
	_map.emplace(0xF8, PostByte_6x09{"[?,S]"  , "AAEEADA"   , { {1} } });
	_map.emplace(0xF9, PostByte_6x09{"[?,S]"  , "AAEEEEADA" , { {2} } });
	_map.emplace(0xFA, PostByte_6x09{"[F,S]"  , "ADADA"     , {     } });
	_map.emplace(0xFB, PostByte_6x09{"[D,S]"  , "ADADA"     , {     } });
	_map.emplace(0xFC, PostByte_6x09{"[?,PC]" , "AAEEADDA"  , { {1} } });
	_map.emplace(0xFD, PostByte_6x09{"[?,PC]" , "AAEEEEADDA", { {2} } });
	_map.emplace(0xFE, PostByte_6x09{"[W,S]"  , "ADADA"     , {     } });
	_map.emplace(0xFF, PostByte_6x09{"Illegal", "BBBBBBB"   , { {2} } });
}